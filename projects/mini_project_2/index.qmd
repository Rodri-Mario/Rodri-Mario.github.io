---
title: "Mini-Project 2"
description: "A Project from Data Science 2 where we explored web scraping"
image: mini_project_2_pic.png
categories: [R, Web Scraping] 
draft: false
format:
  html: default
editor_options: 
  chunk_output_type: console
---

```{r}
#| warning: false
#| message: false
#| include: false

#Initializing Used Libraries 
library(tidyverse)
library(tidytext)
library(polite)
library(rvest)
library(httr)
library(xml2)
library(SentimentAnalysis)
```

### Purpose and Scope of the Project

For this project we decided to collect the songs that appear in the [Billboards Hot 100](https://www.billboard.com/charts/hot-100/) and then also find their corresponding lyrics on [Genius](https://genius.com/). We did this since we though it would be interesting to perform a bit of text analysis on these most popular songs, as it could give us a bit of insight in what makes a song popular at a given time. For this project, we will be showing the results for the 25 most popular songs, since it would take a lot more time to run these scraping and text analysis functions for all 100 songs in the Billboards Hot 100. Below you can see the functions we created and used, as well as the resulting tibbles.

### Functions used in the creation of the the following tibbles

```{r}
get_song_lyrics_genius <- function(song, artist){
  #Format song into the format Genius expects
  song_url <- song |> 
    str_to_lower() |> 
    str_remove_all("[^\\w|\\s]") |> 
    str_replace_all("\\s", "-") 
    
  #Format artist into the format Genius expects
  artist_url <- artist |> 
    str_to_lower() |> 
    str_remove_all(" featuring [\\D]+") |> 
    str_replace_all(" ", "-") |> 
    str_replace_all("&", "and")
  
  #Create full Genius url 
  full_url <- str_c("https://genius.com/",
                    artist_url, 
                    "-", 
                    song_url, 
                    "-lyrics" 
                    )
  
  #Initialize web scrapping session
  session <- bow(full_url, force = TRUE)
  
    #Scrape the page
    page <- scrape(session)
    if(is.null(page)){
      warning("Invalid URL Entered: ", full_url, call. = T, immediate. = T)
      tibble(
        song,
        artist, 
        lyrics = NA
      )
    }
    else{
    
      #Change all <br> tags into spaces 
      #(why does html_text not do this automatically!?)
      xml_find_all(page, ".//br") |> 
        xml_add_sibling("p", " ")
      
      xml_find_all(page, ".//br") |> 
        xml_remove()
      
      #Extract Lyrics
      lyrics <- html_nodes(page, ".Lyrics__Container-sc-1ynbvzw-1") |> 
        html_text() |> 
        str_replace_all("\\[[^\\]]+\\]", " ") |> 
        paste(collapse = "")
      
      #Create Output tibble
      tibble(
        song, 
        artist, 
        lyrics
      )
    }
}
```

```{r}
get_billboard_hot_100 <- function(){
  #Initialing Webscraping Session
  session <- bow("https://www.billboard.com/charts/hot-100/", force = TRUE)
  
  #Vector for placements on the Billboard Hot 100
  placement <- (1:100)
  
  #Getting song titles from Billboard Hot 100
  song_title <- scrape(session) |> 
    html_nodes("li.o-chart-results-list__item > h3#title-of-a-story") |>
    html_text() |> 
    str_trim() #Removing white space from html_text
  
  #Getting artist from Billboard Hot 100
  artist <- scrape(session) |> 
    html_nodes("li.o-chart-results-list__item > span.c-label.a-no-trucate") |> 
    html_text() |> 
    str_trim() #Removing white space from html_text
  
  #Getting how many weeks a song has been on the Billboard Hot 100
  weeks_on_chart <- scrape(session) |> 
    html_nodes("ul.lrv-a-unstyle-list.lrv-u-flex.lrv-u-height-100p li:nth-child(6) > span.c-label") |> 
    html_text() |> 
    str_trim() #Removing white space from html_text
  
  #Getting the Week that this chart is describing 
  week_of_chart <- scrape(session) |>
    html_nodes("p.c-tagline.a-font-primary-medium-xs") |> 
    html_text() |> 
    str_extract("Week of (\\D+ \\d+, \\d{4})", 1) |> #RegEx to extract the week
    mdy()
  
  #Combining into one tibble
  tibble(
    placement, 
    song_title,
    artist, 
    weeks_on_chart,
    week_of_chart,
  )
}
```

Creating our tibble of songs in the Billboard Hot 100

```{r}
#Tibble that holds the entries of the Billboard Hot 100
top_100 <- get_billboard_hot_100()

#Tibble that has the title, artist, and lyrics of the 1st 25 songs in the 
#Billboard Hot 100
top_100_lyrics <- map2(top_100$song_title[1:25],
                       top_100$artist[1:25],
                       \(x, y) get_song_lyrics_genius(x, y)
                       ) |> 
  bind_rows()
  

```

### Sentiment Analysis of `top_100_lyrics`

```{r}
top_100_sentiment <- top_100_lyrics |> 
  mutate(word_count = SentimentAnalysis::analyzeSentiment(lyrics)$"WordCount", 
         sentimentGI = SentimentAnalysis::analyzeSentiment(lyrics)$"SentimentGI"
         )
```

### Resulting Tables

```{r}
print(top_100, n = 25)

print(top_100_lyrics, n = 25)

print(top_100_sentiment, n = 25)
```
